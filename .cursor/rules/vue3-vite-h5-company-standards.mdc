---
description:
globs:
alwaysApply: true
---
# Vue3 移动端H5项目开发规范

## 项目架构与技术栈

本项目是基于 Vue 3 + TypeScript + Vite 构建的移动端 H5 企业应用。

### 核心技术
- **框架**：Vue 3.5.x + Composition API + `<script setup>` 语法
- **构建工具**：Vite 6.x
- **语言**：TypeScript 5.8.x
- **样式**：UnoCSS 66.x
- **UI组件库**：Vant 4.x (移动端组件) + Element Plus 2.x (复杂数据展示)
- **状态管理**：Pinia 3.x + pinia-plugin-persistedstate
- **HTTP请求**：Axios
- **移动端适配**：postcss-mobile-forever

## 编码风格与规范

### 组件开发规范

1. **组件基本结构**
   ```vue
   <template>
     <div class="flex-col-center gap-10px">
       <!-- 组件内容 -->
     </div>
   </template>

   <script setup lang="ts">
   // 在组件顶部定义组件名称
   defineOptions({
     name: 'ComponentName'
   });

   // Props 定义 - 优先使用 TypeScript 类型
   defineProps<{
     title: string;
     options: Array<{ label: string; value: string }>;
   }>();

   // Emits 定义 - 明确事件类型
   const emit = defineEmits<{
     (e: 'update:modelValue', value: string): void;
     (e: 'change', value: string): void;
   }>();

   // 使用 defineModel 处理双向绑定
   const modelValue = defineModel<string>('modelValue');

   // 组件逻辑实现
   </script>
   ```

2. **组件命名与文件结构**
   - 组件文件使用 PascalCase (大驼峰) 命名
   - 基础UI组件放置在 `src/components/base` 目录
   - 业务组件放置在 `src/components/core` 目录
   - 每个组件一个文件夹，入口文件为 `index.vue`

3. **最佳实践**
   - 组件必须定义 name 选项（使用 defineOptions）
   - 组件必须使用 TypeScript 类型定义 Props 和 Emits
   - 单一职责：一个组件只做一件事
   - 组件通信方式：Props & Events、Provide/Inject、Pinia Store

## UnoCSS 使用规范

严格按照 [uno.config.ts](mdc:uno.config.ts) 配置使用原子化CSS类，充分利用项目定义的shortcuts和规则。

### 项目定义的快捷方式(shortcuts)

1. **布局类**
```html
<!-- flex 布局 -->
<div class="flex-center">居中对齐</div>
<div class="flex-between">两端对齐</div>
<div class="flex-around">分散对齐</div>
<div class="flex-evenly">均匀对齐</div>
<div class="flex-start">起点对齐</div>
<div class="flex-end">终点对齐</div>
<div class="flex-col">列布局</div>
<div class="flex-col-center">列布局居中</div>
<div class="flex-col-between">列布局两端</div>

<!-- 定位类 -->
<div class="abs-full">铺满容器</div>
<div class="abs-center">绝对居中</div>
<div class="abs-x-center">水平居中</div>
<div class="abs-y-center">垂直居中</div>

<!-- 图片尺寸 -->
<div class="wh-full-contain">完全包含</div>
<div class="wh-full-cover">完全覆盖</div>
<div class="wh-full">宽高100%</div>

<!-- 文本处理 -->
<p class="text-truncate">文本省略...</p>

<!-- 底部按钮固定 -->
<div class="fixed-bottom-btns">
  <button class="btn">按钮样式</button>
</div>
```

2. **自定义规则**
```html
<!-- 内边距/外边距 p-top_right_bottom_left -->
<div class="p-10_20_30_40">内边距</div>
<div class="m-10_20">外边距</div>

<!-- 宽高相等 wh-size -->
<div class="wh-100">100px x 100px</div>
```

3. **颜色变量**
```html
<!-- 主色 -->
<div class="bg-primary text-white">主色背景</div>
<!-- 次要颜色 -->
<div class="bg-secondary text-gray">次要颜色背景</div>
```

4. **SVG图标使用**
```html
<!-- 使用本地SVG图标 -->
<i class="i-svg:icon-name"></i>
```

## Vant 与 Element Plus 使用规范

### Vant 组件库

- 优先使用 Vant 组件库实现移动端UI
- 按需引入组件，避免全局引入
- 与 postcss-mobile-forever 配合，处理适配问题

```vue
<template>
  <van-button type="primary" @click="handleClick">
    按钮
  </van-button>

  <van-popup v-model:show="showPopup" position="bottom">
    弹出层内容
  </van-popup>
</template>
```

### Element Plus 组件库

- 仅用于复杂数据展示场景（如表格、图表等）
- 移动端场景尽量不使用或谨慎使用
- 避免与 Vant 组件混用导致的样式冲突

## TypeScript 规范

- 所有代码必须使用 TypeScript 编写
- 接口使用 `interface` 定义，类型别名使用 `type` 定义
- 函数参数和返回值必须有明确的类型标注
- 避免使用 `any`，必要时使用 `unknown`

```typescript
// 接口定义
interface UserInfo {
  id: string;
  name: string;
  role: 'admin' | 'user' | 'guest';
}

// 函数类型
type ApiHandler<T, R> = (params: T) => Promise<R>;

// API 响应类型
interface ApiResponse<T> {
  code: number;
  message: string;
  data: T;
}
```

## 状态管理与数据处理

### Composables 复用逻辑

遵循 Vue 组合式API的设计理念，将复杂逻辑抽离为可复用的 Composables：

```typescript
// 示例: useCounter.ts
export function useCounter(initialValue = 0) {
  const count = ref(initialValue);
  const increment = () => count.value++;
  const decrement = () => count.value--;

  return {
    count,
    increment,
    decrement
  };
}
```

### Pinia 状态管理

按功能模块组织 store，利用 pinia-plugin-persistedstate 进行持久化：

```typescript
// 用户store示例
export const useUserStore = defineStore('user', {
  state: () => ({
    userInfo: null,
    token: ''
  }),
  actions: {
    async login(params: LoginParams) {
      // 实现登录逻辑
      const res = await api.login(params);
      this.token = res.data.token;
      this.userInfo = res.data.userInfo;
    }
  },
  persist: {
    enabled: true,
    strategies: [
      {
        key: 'user',
        storage: localStorage
      }
    ]
  }
});
```

## 移动端适配与优化

### postcss-mobile-forever 配置

项目使用 postcss-mobile-forever 实现移动端适配，严格按照以下配置处理：

- UI设计稿宽度: Vant组件使用 375px，自定义组件使用 750px
- 最大显示宽度: 750px
- 页面最外层选择器: #app
- 转换单位: vw

```html
<!-- 使用 UnoCSS 配合 postcss-mobile-forever -->
<div class="text-28px p-20px">
  自动适配不同屏幕尺寸的文本和间距
</div>
```

### 性能优化

1. **路由懒加载**
```typescript
const routes = [
  {
    path: '/user',
    component: () => import('@/views/user/index.vue')
  }
];
```

2. **代码分割**
按照 vite.config.ts 中的配置，对代码进行分割：
- vue 相关代码打包为 'vue.js'
- axios 打包为 'axios.js'
- 其他 node_modules 按模块分组

3. **图片优化**
- 使用 WebP 格式图片
- 实现图片懒加载
- 使用合适的图片尺寸

## 提交规范

严格遵循 commitlint.config.ts 中定义的提交规范：

- **类型**：必须为以下之一：
  - feat: 新功能
  - fix: 修复bug
  - perf: 性能优化
  - style: 样式修改
  - docs: 文档更新
  - test: 测试
  - refactor: 代码重构
  - build: 构建相关
  - ci: CI配置
  - chore: 其他更改
  - revert: 回退
  - wip: 开发中
  - workflow: 工作流
  - types: 类型定义
  - release: 发布

- **格式**：`类型: 描述`（使用中文描述）

```
feat: 新增用户登录功能
fix: 修复搜索组件样式问题
```

## 代码简洁与优雅原则

1. **函数式与声明式优先**：使用函数式和声明式编程风格，避免命令式代码
2. **短小精悍**：函数保持简短，单一职责
3. **语义化命名**：变量和函数名清晰表达意图
4. **组合优于继承**：使用组合式API组织代码
5. **DRY原则**：避免代码重复，提取共用逻辑
6. **避免副作用**：尽量使用纯函数
7. **异步处理**：统一使用 async/await 处理异步，避免回调地狱

示例：
```typescript
// ❌ 不推荐
function processData(data) {
  let result = [];
  for (let i = 0; i < data.length; i++) {
    if (data[i].status === 'active') {
      result.push({
        id: data[i].id,
        name: data[i].name
      });
    }
  }
  return result;
}

// ✅ 推荐
function processData(data: DataItem[]): ProcessedItem[] {
  return data
    .filter(item => item.status === 'active')
    .map(({ id, name }) => ({ id, name }));
}
```

## 第三方库灵活运用

1. **vant 组件自定义**：通过插槽和样式覆盖灵活使用Vant组件
2. **echarts 图表定制**：结合composables封装图表逻辑
3. **vueuse 工具集**：充分利用vueuse提供的组合式函数
4. **dayjs 日期处理**：统一使用dayjs处理日期时间
5. **lodash-es 工具函数**：按需引入lodash-es中的函数，避免全量导入

示例：
```vue
<!-- Vant组件自定义 -->
<van-cell class="custom-cell">
  <template #title>
    <div class="flex-between">
      <span class="text-primary">自定义标题</span>
      <i class="i-svg:icon-name"></i>
    </div>
  </template>
</van-cell>

<!-- VueUse结合 -->
<script setup>
import { useLocalStorage } from '@vueuse/core';

const theme = useLocalStorage('theme', 'light');
</script>
```

## 总结

通过遵循上述规范，确保代码质量、性能优化和团队协作效率，打造高质量的移动端H5应用。在开发过程中，应灵活运用第三方库的特性，编写简洁优雅的代码，严格遵循项目配置，保持一致的代码风格。
